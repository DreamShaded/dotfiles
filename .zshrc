# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

############################################################################
#
# zsh plugins
#
############################################################################

export ZSH_PLUGINS=~/packages/zsh-plugins

source $ZSH_PLUGINS/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $ZSH_PLUGINS/zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH_PLUGINS/zsh-git-prompt/zshrc.sh

source $ZSH/oh-my-zsh.sh


############################################################################
#
# Plugins customization
#
############################################################################

# Change the suggestion color
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'  # Set to gray

############################################################################
#
# Shit for git
#
############################################################################

autoload -Uz vcs_info
zstyle ':vcs_info:git:*' formats '(%b)'  # Show branch name
zstyle ':vcs_info:*' enable git          # Enable Git

precmd() { vcs_info }  # Update Git info before each prompt


############################################################################
#
# $PS1 -> $PROMPT
#
############################################################################

# Define colors
prompt_color='%F{green}'
info_color='%F{blue}%B'
reset_color='%f%b'

# Prompt symbol
prompt_symbol=㉿

PROMPT='${prompt_color}┌──(${info_color}%n${prompt_symbol}%m${prompt_color})-[${reset_color}%~${prompt_color}]${vcs_info_msg_0_}
${prompt_color}└─${info_color}$ ${reset_color}'

############################################################################
#
# my aliases, snippets, bash functions
#
############################################################################

for file in ~/.r.snippets/*
do
  . "$file"
done

############################################################################
#
# nvm, node and other autogenerated shit
#
############################################################################
source ~/completion-for-pnpm.bash

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
. "$HOME/.cargo/env"


if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)); then

      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
